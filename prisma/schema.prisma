// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course{
  id              String @id @default(uuid()) @map("_id")
  userId          String
  title           String
  topic           String
  description     String?
  imageUrl        String?
  price           Float?
  isPublished     Boolean @default(false)

  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])

  languageId      String?
  language        Language? @relation(fields: [languageId], references: [id])

  courseLevelId      String?
  courseLevel        CourseLevel? @relation(fields: [languageId], references: [id])

  chapters        Chapter[]
  attachments     Attachment[]
  purchases       Purchase[]

  createdAt       DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id         String @id @default(uuid()) @map("_id")
  name       String
  Courses    Course[]
}

model Language {
  id         String @id @default(uuid()) @map("_id")
  name       String
  Courses    Course[]
}

model CourseLevel {
  id         String @id @default(uuid()) @map("_id")
  name       String
  Courses    Course[]
}

model Chapter {
  id          String @id @default(uuid()) @map("_id")
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData     MuxData?

  courseId    String
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress  UserProgress[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model Attachment {
  id         String @id @default(uuid()) @map("_id")
  name       String
  url        String

  courseId   String
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([courseId])
}

model Purchase {
  id        String @id @default(uuid()) @map("_id")
  userId    String

  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model MuxData {
  id          String @id @default(uuid()) @map("_id")
  assetId     String
  playbackId  String?

  chapterId   String @unique
  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
   id          String @id @default(uuid()) @map("_id")
  userId       String

  chapterId    String
  chapter      Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted  Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model StripeCustomer{
  id String @id @default(uuid()) @map("_id")
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
